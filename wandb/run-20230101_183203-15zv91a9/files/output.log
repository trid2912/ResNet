2023-01-01 18:32:08,693 UNet  INFO: Number of train images: 10270
2023-01-01 18:32:08,693 UNet  INFO: Number of validation images: 1784
2023-01-01 18:32:08,693 UNet  INFO: Start training
Traceback (most recent call last):
  File "/home/kc/tritd/ResNet/train_fully.py", line 177, in <module>
    model = train(cfg, logger)
  File "/home/kc/tritd/ResNet/train_fully.py", line 110, in train
    preds = model(images)
  File "/home/kc/.conda/envs/tritd/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/kc/.conda/envs/tritd/lib/python3.9/site-packages/segmentation_models_pytorch/base/model.py", line 29, in forward
    features = self.encoder(x)
  File "/home/kc/.conda/envs/tritd/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/kc/.conda/envs/tritd/lib/python3.9/site-packages/segmentation_models_pytorch/encoders/resnet.py", line 62, in forward
    x = stages[i](x)
  File "/home/kc/.conda/envs/tritd/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/kc/.conda/envs/tritd/lib/python3.9/site-packages/torch/nn/modules/container.py", line 204, in forward
    input = module(input)
  File "/home/kc/.conda/envs/tritd/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/kc/.conda/envs/tritd/lib/python3.9/site-packages/torchvision/models/resnet.py", line 155, in forward
    out = self.bn3(out)
  File "/home/kc/.conda/envs/tritd/lib/python3.9/site-packages/torch/nn/modules/module.py", line 1194, in _call_impl
    return forward_call(*input, **kwargs)
  File "/home/kc/.conda/envs/tritd/lib/python3.9/site-packages/torch/nn/modules/batchnorm.py", line 171, in forward
    return F.batch_norm(
  File "/home/kc/.conda/envs/tritd/lib/python3.9/site-packages/torch/nn/functional.py", line 2450, in batch_norm
    return torch.batch_norm(
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 128.00 MiB (GPU 1; 23.69 GiB total capacity; 4.33 GiB already allocated; 32.69 MiB free; 4.39 GiB reserved in total by PyTorch) If reserved memory is >> allocated memory try setting max_split_size_mb to avoid fragmentation.  See documentation for Memory Management and PYTORCH_CUDA_ALLOC_CONF